<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MUMU</title>
  
  <subtitle>MUMU&#39;S BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-04T07:53:17.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bbgirl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Native</title>
    <link href="http://yoursite.com/2019/07/01/react-native/"/>
    <id>http://yoursite.com/2019/07/01/react-native/</id>
    <published>2019-07-01T02:48:04.000Z</published>
    <updated>2019-07-04T07:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-React-Native基础理论知识"><a href="#2-React-Native基础理论知识" class="headerlink" title="2 React Native基础理论知识"></a>2 React Native基础理论知识</h2><h4 id="React-Native布局知识讲解"><a href="#React-Native布局知识讲解" class="headerlink" title="React Native布局知识讲解"></a>React Native布局知识讲解</h4><p><strong>1，宽和高</strong></p><blockquote><p>在学习FlexBox之前首先要清楚一个概念“宽和高”，一个组件的宽度和高度决定了它在屏幕上的尺寸，也就是大小。</p></blockquote><p><strong>2，像素无关</strong></p><blockquote><p>在React Native中尺寸是没有单位的，它代表了设备的独立像素。<br>下面代码中，运行在Android上时，View的宽度被解析成：100dp，单位是dp，字体被解析成16sp，单位是sp；运行在iOS上时尺寸单位被解析成pt，这些单位确保了布局在任何不同dpi的手机屏幕上显示不会发生改变；</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;&#123;<span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span>, <span class="attr">margin</span>: <span class="number">40</span>, <span class="attr">backgroundColor</span>: <span class="string">'gray'</span>&#125;&#125;&gt;</span><br><span class="line">  &lt;Text stylee=&#123;&#123;<span class="attr">fontSize</span>: <span class="number">16</span>, <span class="attr">margin</span>: <span class="number">20</span>&#125;&#125;&gt;尺寸&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>View&gt;</span><br></pre></td></tr></table></figure><p><strong>3，和而不同</strong></p><p>值得一提的是，React Native中的FlexBox和Web CSS中的FlexBox工作方式是一样的，但有些地方是有出入的，如：</p><blockquote><ul><li>flexDirection：React Native中默认为<code>flexDirection: &#39;column&#39;</code>，在Web CSS默认为<code>flex-direction: &#39;row&#39;</code></li><li>alignItems: React Native中默认为<code>alignItems: &#39;stretch&#39;</code>，在Web CSS中默认为<code>align-items: &#39;flex-start&#39;</code></li><li>flex：相比Web CSS的flex接受锁参数，<code>flex: 2 2 10%</code>，但在React Native中flex只接受一个参数</li><li>React Native不支持属性：align-content，flex-basis，order，flex-basis，flex-flow，flex-grow，flex-shrink</li></ul></blockquote><p>以上是React Native中FlexBox和Web CSS上FlexBox的不同之处，记住这几点，你可以像在Web CSS上使用FlexBox一样，在React Native中使用FlexBox。</p><h4 id="从navigator到react-navigator"><a href="#从navigator到react-navigator" class="headerlink" title="从navigator到react-navigator"></a>从navigator到react-navigator</h4><p>随着<code></code></p><blockquote><p>有很多小伙伴可能会问：navigation中有setParams为什么还要有NavigationAction.setParams?</p><ol><li>在上文中讲到过navigation中有可能只有state与dispatch，这个时候如果要修改页面的Params，则只能通过<code>NavigationAction.setParams</code>了；</li><li>例外，navigatiob.setParams只能修改当前页面的Params，而<code>NavigationActions.setParams</code>可以修改是所有页面的Params；</li></ol></blockquote><h3 id="StackActions"><a href="#StackActions" class="headerlink" title="StackActions"></a>StackActions</h3><ul><li>Reset：重置当前state到一个新的state；</li><li>Replace：使用另一个路由替换指定的路由；</li><li>Push：在堆栈顶部添加一个页面，然后跳转到该页面；</li><li>Pop：跳转到上一个页面；</li><li>PopToTop：跳转到堆栈最顶层的页面，并销毁其他所有页面；</li></ul><h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset:"></a>Reset:</h3><p>Reset action删掉所有的navigation state并且使用这个actions的结果来代替。</p><ul><li>index，数组，必选，navigation state中route数组中急活route的index。</li><li>actions，数组，必选项，Navigation Actions数组，将会替代navigation state。</li><li>key：<code>string or null</code>可选，如果设置，具有给定key的导航将重置。如果为null，则根导航将重置。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;NavigationActions, StackActions&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resetAction = StackActions.reset(&#123;</span><br><span class="line">  index: <span class="number">0</span>,</span><br><span class="line">  actions: [</span><br><span class="line">    NavigationActions.navigate(&#123;<span class="attr">routeName</span>: <span class="string">'Profile'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.props.navigation.dispatch(resetAction);</span><br></pre></td></tr></table></figure><blockquote><p>使用场景比如进入APP首页后的splash页不再使用，这时可以使用<code>NavigationActions.reset</code>重置它。</p></blockquote><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><p>Push - 在堆栈顶部添加一条路由，并导航至该路由，与navigate的区别在于，如果有已经加载过的页面，navigate方法将跳转已经加载的页面，而不会重新创建一个新的页面。push总是会创建新的页面，所以一个页面可以被多次创建。</p><ul><li>routeName - string - routeName用于替换路由。</li><li>params - object - 将合并到目标路由的参数，通过this.props.navigation.state.params在目标路由获取。</li><li>action - Object - 可选 - （高级）如果页面是navigator，则是在子路由器中运行的自操作。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;StackActions&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pushAction = StackActions.push(&#123;</span><br><span class="line">  routeName: <span class="string">'Profile'</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    myUserId: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.props.navigation.dispatch(pushAction);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><p>The pop 一个可以返回到堆栈中上一个路由到方法，通过设置参数n，可以指定返回的多少层。</p><ul><li>n - number - 返回的层数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;StackActions&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> popAction = StackActions.pop(&#123;</span><br><span class="line">  n: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.props.navigation.dispatch(popAcction);</span><br></pre></td></tr></table></figure></li></ul><h3 id="popToTop"><a href="#popToTop" class="headerlink" title="popToTop"></a>popToTop</h3><p>The popToTop一个可以直接跳转到堆栈最顶层，并销毁它所有页面的方法，它在功能上与<code>StackActions.pop({n: currentIndex})</code>相同。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;StackActions&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.props.navigation.dispatch(StackActions.popToTop());</span><br></pre></td></tr></table></figure></p><h3 id="createStackNavigator"><a href="#createStackNavigator" class="headerlink" title="createStackNavigator"></a>createStackNavigator</h3><p><code>createStackNavigator</code>提供APP屏幕之间切换的能力，它是以栈的形式来管理屏幕之间的切换，新切换的屏幕会放在栈的顶部。</p><h3 id="屏幕的转场风格"><a href="#屏幕的转场风格" class="headerlink" title="屏幕的转场风格"></a>屏幕的转场风格</h3><p>默认情况下，createStackNavigator提供了转场过度效果，在Android和iOS上的过渡效果是不同的，这也是React Native跨平台的一个体现，在Android上从屏幕底部淡入，在iOS上是从屏幕的右侧划入，当然你也可以通过配置让StackNavigator支持屏幕从底部划入的效果。</p><h3 id="createStackNavigator-API"><a href="#createStackNavigator-API" class="headerlink" title="createStackNavigator API"></a>createStackNavigator API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStackNavigator&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AppStackNavigator = createStackNavigtor(&#123;</span><br><span class="line">  HomePage: &#123;</span><br><span class="line">    screen: HomePage</span><br><span class="line">  &#125;,</span><br><span class="line">  Page1: &#123;</span><br><span class="line">    screen: Page1,</span><br><span class="line">    navigationOptions: <span class="function">(<span class="params">&#123;navigation&#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      title: <span class="string">`<span class="subst">$&#123;navigation.state.params.name&#125;</span>页面名`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  Page2: &#123;</span><br><span class="line">    screen: Page2,</span><br><span class="line">    navigationOptions: &#123;</span><br><span class="line">      title: <span class="string">`This is Page2`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  Page3: &#123;</span><br><span class="line">    screen: Page3,</span><br><span class="line">    navigationOptions: <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;navigation&#125; = props;</span><br><span class="line">      <span class="keyword">const</span> &#123;state, setParams&#125; = navigation;</span><br><span class="line">      <span class="keyword">const</span> &#123;params&#125; = state;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        title: params.title ? params.title : <span class="string">'This is Page3'</span>,</span><br><span class="line">        headerRight: (</span><br><span class="line">          &lt;Button title=&#123;params.mode === <span class="string">'edit'</span> ? <span class="string">'保存'</span> : <span class="string">'编辑'</span>&#125; onPress=&#123;()=&gt;setParams(&#123;<span class="attr">mode</span>: params.mode === <span class="string">'edit'</span> ? <span class="string">''</span> : <span class="string">'edit'</span>&#125;)&#125;/&gt;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="createMeterialTopTabNavigator"><a href="#createMeterialTopTabNavigator" class="headerlink" title="createMeterialTopTabNavigator"></a>createMeterialTopTabNavigator</h3><p>createMeterialTopTabNavigator支持的屏幕导航选项的参数有：</p><ul><li>title：可以作用headerTitle和tabBarLabel的备选的通用标题。</li><li>swipeEnable：是否允许tab之间的滑动切换，默认允许；</li><li>tabBarIcon：设置TabBar的图标；</li><li>tabBarOnPress：Tab被点击的回调函数，它的从参数是包含以下变量的对象：<ul><li>navigation：页面的navigation props</li><li>defaultHandler：tab press的默认handler</li></ul></li><li>tabBarAccessibilityLabel：选项卡按钮的辅助功能标签。当用户点击标签时，屏幕阅读器会读取这些信息。如果您没有选项卡的标签，建议设置此项；</li><li>tabBarTestID：用于在测试中找到该选项卡按钮的ID;</li></ul><h3 id="案例一-使用createBottomTabNavigator做界面导航、配置navigationOptions"><a href="#案例一-使用createBottomTabNavigator做界面导航、配置navigationOptions" class="headerlink" title="[案例一]使用createBottomTabNavigator做界面导航、配置navigationOptions"></a>[案例一]使用createBottomTabNavigator做界面导航、配置navigationOptions</h3><p>第一步：创建一个createBottomTabNavigator类型的导航器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="在使用react-navigator时往往有些需求通过简单的配置是无法完成的，比如："><a href="#在使用react-navigator时往往有些需求通过简单的配置是无法完成的，比如：" class="headerlink" title="在使用react-navigator时往往有些需求通过简单的配置是无法完成的，比如："></a>在使用react-navigator时往往有些需求通过简单的配置是无法完成的，比如：</h3><ul><li>动态配置createBottomTabNavigaotr：官方只提供了TabNavigator中的页面的静态配置方案，如果TabNavigator的样式，需要动态生成那么需要怎么做呢？</li><li>动态配置createBottomTabNavigator的样式：通过官方的文档是无法实现动态改变TabNavigator样式的，比如：修改显示的文字，修改字体的颜色，修改图标等；</li><li>多层嵌套后路由个性化定制：createBottomTabNavigator被包裹后在TabNavigator中的页面是无法借助navigation跳转到外层StackNavigator中的页面的，这种应用场景很多，尤其是你需要定制TabNavigator的时候；</li><li>初始化传参：如何在设置页面的时候传递参数呢？</li></ul><h3 id="createSwitchNavigator"><a href="#createSwitchNavigator" class="headerlink" title="createSwitchNavigator"></a>createSwitchNavigator</h3><p>SwitchNavigator的用途是一次只显示一个页面。默认情况下，它不处理返回操作，并在你切换时将路由重置为默认状态。</p><h3 id="FlatList的由来？"><a href="#FlatList的由来？" class="headerlink" title="FlatList的由来？"></a>FlatList的由来？</h3><p>在RN0.43版本中引入了<code>FlatList</code>，<code>SectionList</code>，与<code>VirtualizedList</code>，其中<code>Virtualized</code>是FlatList与SectionList的底层实现。</p><blockquote><p>可能有人要问了，既然有了ListView，那为什幺还要设计一个FlatList出来呢？</p></blockquote><p>经常使用ListView的同学都知道：ListView的性能是比较差的，尤其是当有大量的数据需要展示的时候，ListView对内存的占用是相当可观的，丢帧卡顿那是常有的事。</p><blockquote><p>为什么ListView对于大数据量的情况下性能会很差呢？</p></blockquote><p>深入ListView的原理你会发现，ListView对列表中的item是全量渲染的，并且没有复用机制，这就难以避免当ListView渲染大数据量的时候回发生以下两个问题：</p><ul><li>第一次打开与切换Tab时会出现卡顿或白屏的情况：这是因为ListView对所有的item都是全量渲染的，比如：ListView中有100条item，只有等这100条item都渲染完成，ListView中的内容才会展示，这就难以避免卡顿白屏的问题；</li><li>活动列表时会出现卡顿不跟手：当因ListView中展示了大量数据的时候，滑动列表你会发现没有少了数据的时候的跟手与流畅，这是因为ListView为了渲染大量数据需要大量的内存和计算，这对手机资源是一个很大的消耗，尤其是在一些低端机上甚至会常出现OOM（内存溢出）;<br>ListView的这种性能问题一直困扰这RN开发者。有能力的公司、团队都纷纷对ListView做优化，封装自己的列表组件，依然性能的提升并不大，所以现在急需一个高性能的列表组件，于是便有了设计FlatList的构想；</li></ul><blockquote><p>那FlatList都有哪特性能呢？</p></blockquote><p>FlatList是基于VirtualizedList的，要说FlatList的特性还要从VitualzedList说起：</p><h3 id="VirtualizedList"><a href="#VirtualizedList" class="headerlink" title="VirtualizedList"></a>VirtualizedList</h3><h3 id="实例：上拉加载更多，下拉刷新，自定义刷新组件"><a href="#实例：上拉加载更多，下拉刷新，自定义刷新组件" class="headerlink" title="实例：上拉加载更多，下拉刷新，自定义刷新组件"></a>实例：上拉加载更多，下拉刷新，自定义刷新组件</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2-React-Native基础理论知识&quot;&gt;&lt;a href=&quot;#2-React-Native基础理论知识&quot; class=&quot;headerlink&quot; title=&quot;2 React Native基础理论知识&quot;&gt;&lt;/a&gt;2 React Native基础理论知识&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Node.js开发博客项目（二）</title>
    <link href="http://yoursite.com/2019/05/24/hello-nodejs2/"/>
    <id>http://yoursite.com/2019/05/24/hello-nodejs2/</id>
    <published>2019-05-24T07:52:20.000Z</published>
    <updated>2019-06-04T08:41:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote><ul><li>mysql介绍、安装和使用</li><li>nodejs连接mysql</li><li>API连接mysql</li></ul></blockquote><h2 id="为何使用mysql而不是mogodb"><a href="#为何使用mysql而不是mogodb" class="headerlink" title="为何使用mysql而不是mogodb"></a>为何使用mysql而不是mogodb</h2><ul><li>mysql是企业内最常用的存储工具，一般都有专人运维</li><li>mysql也是社区内最常用的存储工具，有问题随时可查询</li><li>另：mysql本身是一个复杂的数据库软件，本课只讲基本使用</li></ul><h2 id="mysql介绍"><a href="#mysql介绍" class="headerlink" title="mysql介绍"></a>mysql介绍</h2><ul><li>web server中最流行的关系型数据库</li><li>官网可免费下载，用于学习</li><li>轻量级，易学易用</li></ul><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><ul><li>建库</li><li>建表</li><li>表操作</li></ul><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><ol><li>创建<code>users</code>表</li></ol><table><thead><tr><th style="text-align:center">cloumn</th><th style="text-align:center">datatype</th><th style="text-align:center">pk 主键</th><th style="text-align:center">nn 不为空</th><th style="text-align:center">AI 自动增加</th><th style="text-align:center">Default</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">username</td><td style="text-align:center">varchar(20)</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">varchar(20)</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">realname</td><td style="text-align:center">varchar(10)</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><ol><li>创建<code>blogs</code>表</li></ol><table><thead><tr><th style="text-align:center">column</th><th style="text-align:center">datatype</th><th style="text-align:center">pk 主键</th><th style="text-align:center">nn 不为空</th><th style="text-align:center">AI 自动增加</th><th style="text-align:center">Default</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">init</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">varchar(50)</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">content</td><td style="text-align:center">longtext</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">createtime</td><td style="text-align:center">bigint(20)</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">author</td><td style="text-align:center">varchar(20)</td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h2 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h2><ul><li>增、删、改、查</li><li>使用sql语句（入门简单，一学就会）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username, <span class="string">`password`</span>, realname) <span class="keyword">values</span> (<span class="string">'zhangsan'</span>, <span class="string">'123'</span>, <span class="string">'张三'</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username, <span class="string">`password`</span>, realname) <span class="keyword">values</span> (<span class="string">'lisi'</span>, <span class="string">'123'</span>, <span class="string">'李四'</span>)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,username <span class="keyword">from</span> <span class="keyword">users</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username=<span class="string">'zhangsan'</span> <span class="keyword">and</span> <span class="string">`password`</span>=<span class="string">'123'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username=<span class="string">'zhangsan'</span> <span class="keyword">or</span> <span class="string">`password`</span>=<span class="string">'123'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">'%zhang%'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">password</span> <span class="keyword">like</span> <span class="string">'%1%'</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">users</span> <span class="keyword">set</span> realname=<span class="string">'李四2'</span> <span class="keyword">where</span> username=<span class="string">'lisi'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username = <span class="string">'lisi'</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">users</span> <span class="keyword">set</span> state = <span class="string">'0'</span> <span class="keyword">where</span> username = <span class="string">'lisi'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> blogs (title, <span class="keyword">content</span>, createtime, author) <span class="keyword">values</span> (<span class="string">'标题A'</span>, <span class="string">'内容A'</span>, <span class="number">1558937202929</span>, <span class="string">'zhangsan'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> blogs (title, <span class="keyword">content</span>, createtime, author) <span class="keyword">values</span> (<span class="string">'标题B'</span>, <span class="string">'内容B'</span>, <span class="number">1558937202929</span>, <span class="string">'lisi'</span>)</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> blogs <span class="keyword">order</span> <span class="keyword">by</span> createtime <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> blogs <span class="keyword">where</span> title <span class="keyword">like</span> <span class="string">'%标题%'</span> <span class="keyword">order</span> <span class="keyword">by</span> createtime <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>如何建库、如何建表</li><li>建表时常用数据类型（int bigint varchar longtext）</li><li>sql语句实现增、删、改、查</li></ul><h2 id="Nodejs操作Mysql"><a href="#Nodejs操作Mysql" class="headerlink" title="Nodejs操作Mysql"></a>Nodejs操作Mysql</h2><ul><li>示例：用demo演示，不考虑使用</li><li>封装：将其封装为系统可用的工具</li><li>使用：让API直接操作数据库，不再使用假数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接对象</span></span><br><span class="line"><span class="keyword">const</span> con =  mysql.createConnection(&#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  port: <span class="string">'3306'</span>,</span><br><span class="line">  database: <span class="string">'myblog'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始连接</span></span><br><span class="line">con.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 SQL 语句</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">`insert into blogs (title, content, createtime, author) values ('标题C', '内容C', 1558940728732, 'zhangsan')`</span>;</span><br><span class="line">con.query(sql, (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err:'</span>, err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result:'</span>, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">con.end();</span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>nodejs连接 mysql，如何执行 sql 语句</li><li>根据 NODE_ENV 区分配置</li><li>封装 exec 函数，API使用 exec 操作数据库</li></ul><hr><h1 id="博客项目之登录"><a href="#博客项目之登录" class="headerlink" title="博客项目之登录"></a>博客项目之登录</h1><h2 id="6-1-1-登录"><a href="#6-1-1-登录" class="headerlink" title="6.1.1 登录"></a>6.1.1 登录</h2><ul><li>核心：登录校验 &amp; 登录信息存储</li><li>为何只讲登录，不讲注册？</li></ul><h2 id="6-1-2-目录"><a href="#6-1-2-目录" class="headerlink" title="6.1.2 目录"></a>6.1.2 目录</h2><blockquote><ul><li>cookie 和 session</li><li>session 写入 redis</li><li>开发登录功能，和前端联调（用到nginx反向代理）</li></ul></blockquote><h2 id="6-2-1-cookie"><a href="#6-2-1-cookie" class="headerlink" title="6.2.1 cookie"></a>6.2.1 cookie</h2><blockquote><ol><li>什么是 cookie<ul><li>存储在浏览器的一段字符串（最大是5kb）</li><li>跨域不共享</li><li>格式如k1=v1;k2=v2;k3=v3;因此可以存储结构化数据</li><li>每次发送http请求，会将请求域的cookie一起发送给server</li><li>server可以修改cookie并返回给浏览器</li><li>浏览器中也可以通过javascript修改cookie（有限制）</li></ul></li><li>javascript操作cookie，浏览器中查看cookie（三种方式）<ul><li>Request请求中Cookie,Response中的Set-Cookie</li><li>Application中Cookies</li><li>控制台中document.cookie</li></ul></li><li>server端操作cookie，实现登录验证<ul><li>查看cookie</li><li>修改cookie</li><li>实现登录验证</li></ul></li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 cookie</span></span><br><span class="line">req.cookie = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> cookieStr = req.headers.cookie || <span class="string">''</span>;</span><br><span class="line">cookieStr.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!item) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> arr =  item.split(<span class="string">'='</span>);</span><br><span class="line">  <span class="keyword">const</span> key = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> val = arr[<span class="number">1</span>];</span><br><span class="line">  req.cookie[key] = val;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(req.cookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 cookie过期时间</span></span><br><span class="line"><span class="keyword">const</span> getCookieExpirs = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  d.setTime(d.getTime() + (<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'getCookieExpired:'</span>, d.toGMTString());</span><br><span class="line">  <span class="keyword">return</span> d.toGMTString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 cookie</span></span><br><span class="line">res.setHeader(<span class="string">'Set-cookie'</span>, <span class="string">`username=<span class="subst">$&#123;loginData.username&#125;</span>; path=/; httpOnly; expires=<span class="subst">$&#123;getCookieExpirres()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><blockquote><ul><li>知道cookie的定义和特点</li><li>前后端如何查看和修改cookie？</li><li>如何使用cookie实现登录验证？</li></ul></blockquote><h2 id="6-6-session介绍"><a href="#6-6-session介绍" class="headerlink" title="6.6 session介绍"></a>6.6 session介绍</h2><blockquote><ul><li>上一节的问题：会暴露username，很危险</li><li>如何解决：cookie中储userid，server端对应username</li><li>解决方案：session，即server端存储用户信息</li></ul></blockquote><h2 id="6-7-1-session代码演示"><a href="#6-7-1-session代码演示" class="headerlink" title="6.7.1 session代码演示"></a>6.7.1 session代码演示</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> getCookieExpires = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  d.setTime(d.getTime() + (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> *<span class="number">3600</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'getCookieExpires:'</span>, d.getGMTString());</span><br><span class="line">  <span class="keyword">return</span> d.getGMTString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 session</span></span><br><span class="line"><span class="keyword">const</span> SESSION_DATA = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> needSetCookie = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> userId = req.cookie.userid;</span><br><span class="line"><span class="keyword">if</span> (userId) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!SESSION_DATA[userId]) &#123;</span><br><span class="line">    SESSION_DATA = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  needSetCookie = <span class="literal">true</span>;</span><br><span class="line">  userId = <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.random()&#125;</span>`</span>;</span><br><span class="line">  SESSION_DATA[userId] = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">req.session = SESSION_DATA[userId];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'解析 req session:'</span>, req.session);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 cookie</span></span><br><span class="line"><span class="keyword">if</span> (needSetCookie) &#123;</span><br><span class="line">  res.setHeader(<span class="string">'Set-cookie'</span>, <span class="string">`userid=<span class="subst">$&#123;userId&#125;</span>;path=/;httpOnly;expires=<span class="subst">$&#123;getCookieExpires()&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// router/user.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;login&#125; = <span class="built_in">require</span>(<span class="string">'../controller/user.js'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;SuccessModel, ErrorModel&#125; = <span class="built_in">require</span>(<span class="string">'../model/resModel'</span>);</span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> path = req.path;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span> &amp;&amp; path === <span class="string">'/api/user/login'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;username, password&#125; = req.query;</span><br><span class="line">    <span class="keyword">return</span> login(username.password).then(<span class="function"><span class="params">loginData</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (loginData.username) &#123;</span><br><span class="line">        <span class="comment">// 登录成功</span></span><br><span class="line">        <span class="comment">// 设置 session</span></span><br><span class="line">        req.session.username = loginData.username;</span><br><span class="line">        req.session.realname = loginData.realname;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">'登录失败'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-7-2-session-总结"><a href="#6-7-2-session-总结" class="headerlink" title="6.7.2 session 总结"></a>6.7.2 session 总结</h2><blockquote><ul><li>知道session解决的问题</li><li>如何实现session</li></ul></blockquote><h2 id="6-8-从-session-到-redis"><a href="#6-8-从-session-到-redis" class="headerlink" title="6.8 从 session 到 redis"></a>6.8 从 session 到 redis</h2><h4 id="1，session-的问题"><a href="#1，session-的问题" class="headerlink" title="1，session 的问题"></a>1，session 的问题</h4><blockquote><ul><li>目前session直接是js变量，放在nodejs进程内存中</li><li>第一，进程内存有限，访问量过大，内存暴增怎么办？</li><li>第二，正式上线运行的是多进程，进程之间内存无法共享</li></ul></blockquote><h4 id="2，解决方案-redis"><a href="#2，解决方案-redis" class="headerlink" title="2，解决方案 redis"></a>2，解决方案 redis</h4><blockquote><ul><li>web server 最常用的缓存数据库，数据存放在内存中</li><li>相比于mysql，访问速度快（内存和硬盘不是一个数量级的）</li><li>但是成本比较高，可存储的数据量更小（内存的硬伤）</li></ul></blockquote><p>如下图：<br><img src="/img/web_server_redis.png" alt="解决方案redis"></p><blockquote><ul><li>将web server 和 redis 拆分为两个单独的服务</li><li>双方都是独立的，都是可扩展的（例如都扩展成集群）</li><li>（包括mysql，也是一个单独的服务，也可扩展）</li></ul></blockquote><h4 id="3，为何-session适合用-redis？"><a href="#3，为何-session适合用-redis？" class="headerlink" title="3，为何 session适合用 redis？"></a>3，为何 session适合用 redis？</h4><blockquote><ul><li>session 访问频繁，对性能要求极高</li><li>session 可怖考虑断电丢失数据的问题（内存的硬伤）</li><li>session 数据量不会太大（相比于mysql中存储的数据）</li></ul></blockquote><h4 id="4，为何网站数据不适合用-redis"><a href="#4，为何网站数据不适合用-redis" class="headerlink" title="4，为何网站数据不适合用 redis?"></a>4，为何网站数据不适合用 redis?</h4><blockquote><ul><li>操作频率不是太高（相比于 session 操作）</li><li>断电不能丢失，必须保留</li><li>数据量太大，内存成本太高</li></ul></blockquote><h2 id="6-9-redis-介绍"><a href="#6-9-redis-介绍" class="headerlink" title="6.9 redis 介绍"></a>6.9 redis 介绍</h2><h4 id="1，安装-redis"><a href="#1，安装-redis" class="headerlink" title="1，安装 redis"></a>1，安装 redis</h4><blockquote><p>Windows: <a href="http://www.runoob.coom/redis/reedis-install.html" target="_blank" rel="noopener">http://www.runoob.coom/redis/reedis-install.html</a><br>Mac：使用 <code>brew install redis</code></p></blockquote><h4 id="2，总结"><a href="#2，总结" class="headerlink" title="2，总结"></a>2，总结</h4><blockquote><ul><li>为何要用redis？不用redis会出现什么问题？</li><li>redis适合什么场景？mysql适合什么场景？</li></ul></blockquote><h2 id="6-10-nodejs-连接-redis-的-demo"><a href="#6-10-nodejs-连接-redis-的-demo" class="headerlink" title="6.10 nodejs 连接 redis 的 demo"></a>6.10 nodejs 连接 redis 的 demo</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./index.js</span></span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建客户端</span></span><br><span class="line"><span class="keyword">const</span> redisClient = redis.createClient(<span class="number">6379</span>, <span class="string">'127.0.0.1'</span>);</span><br><span class="line">redisClient.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.set(<span class="string">'myname'</span>, <span class="string">'zhangfangfang'</span>, redis.print);</span><br><span class="line">redisClient.get(<span class="string">'myname'</span>, (err, value) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'myname:'</span>, value);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 退出</span></span><br><span class="line">  redisClient.quit();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-11-nodejs-连接-redis-封装工具函数"><a href="#6-11-nodejs-连接-redis-封装工具函数" class="headerlink" title="6.11 nodejs 连接 redis 封装工具函数"></a>6.11 nodejs 连接 redis 封装工具函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./conf/db.js</span></span><br><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> REDIS_CONF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (env === <span class="string">'dev'</span>) &#123;</span><br><span class="line">  REDIS_CONF = &#123;</span><br><span class="line">    port: <span class="number">6379</span>,</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (env === <span class="string">'prod'</span>) &#123;</span><br><span class="line">  REDIS_CONF = &#123;</span><br><span class="line">    port: <span class="number">6379</span>,</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  REDIS_CONF</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ./db/redis.js</span></span><br><span class="line"><span class="keyword">const</span> redis =  <span class="built_in">require</span>(<span class="string">'redis'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;REDIS_CONF&#125; = <span class="built_in">require</span>(<span class="string">'../conf/db'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建客户端</span></span><br><span class="line"><span class="keyword">const</span> redisClient = redis.createClient(REDIS_CONF.port, REDIS_CONF.host);</span><br><span class="line">redisClient.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span><br><span class="line">    value = JOSN.stringify(value);</span><br><span class="line">  &#125;</span><br><span class="line">  redisClient.set(key, values, redis.print);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    redisClient.get(key, (err, value) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        resolve(<span class="literal">null</span>)</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        resolve(</span><br><span class="line">          <span class="built_in">JSON</span>.parse(value)</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  get, </span><br><span class="line">  set</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;mysql介绍、安装和使用&lt;/li&gt;
&lt;li&gt;nodejs连接mysql&lt;/li&gt;
&lt;li&gt;API连接
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js开发博客项目（一）</title>
    <link href="http://yoursite.com/2019/04/29/hello-nodejs1/"/>
    <id>http://yoursite.com/2019/04/29/hello-nodejs1/</id>
    <published>2019-04-29T07:28:42.000Z</published>
    <updated>2019-05-24T07:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-Node-js-的真正用途"><a href="#1-1-Node-js-的真正用途" class="headerlink" title="1.1 Node.js 的真正用途"></a>1.1 Node.js 的真正用途</h2><blockquote><ul><li>Nodejs，一个javascript运行环境</li><li><code>运行在服务器，作为web server</code></li><li>运行在本地，作为打包和构建工具</li></ul></blockquote><h2 id="1-2-内容概述"><a href="#1-2-内容概述" class="headerlink" title="1.2 内容概述"></a>1.2 内容概述</h2><blockquote><ul><li>做什么？——nodejs入门到实践，开发个人博客系统</li><li>哪些部分？——API，数据存储，登录，日志，安全</li><li>技术？——http stream session mysql redis nginx pm2 …</li></ul></blockquote><h2 id="1-3-案例架构"><a href="#1-3-案例架构" class="headerlink" title="1.3 案例架构"></a>1.3 案例架构</h2><p><img src="/img/anli_jiagou.jpg" alt="图片alt"></p><h2 id="2-1-Nodejs-介绍"><a href="#2-1-Nodejs-介绍" class="headerlink" title="2.1 Nodejs 介绍"></a>2.1 Nodejs 介绍</h2><p><strong>1）下载 &amp; 安装</strong></p><blockquote><ol><li>普通安装（只有一个版本，不能随意切换），访问<a href="http://nodejs.cn/" target="_blank" rel="noopener">官网</a>,下载并安装；完了打开命令行，运行<code>node -v</code>和<code>npm -v</code>测试。</li><li>使用NVM（Node Version Manager）<ul><li>Nodejs版本管理工具，可切换多个Nodejs版本</li><li>mac os，使用<code>brew install nvm</code>(<a href="https://brew.sh/" target="_blank" rel="noopener">brew</a>是苹果的软件管理工具)</li><li>windows，github中搜索nvm-windows，有下载地址</li><li><code>nvm list</code>，查看当前所有的node版本</li><li><code>nvm install v10.15.0</code>，安装指定版本</li><li><code>nvm use --delete-prefix 8.12.0</code>，切换到指定版本   </li></ul></li></ol></blockquote><p><strong>2）nodejs和前端javascript的区别？</strong></p><blockquote><ol><li>ECMAScript，具体可见<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰的ES6</a><ul><li>定义了语法，写javascript和nodejs都必须遵守</li><li>变量定义，循环、判断、函数</li><li>原型和原型链、作用域和闭包、异步</li><li>不能操作DOM，不能监听click事件，不能发送ajax请求</li><li>不能处理http请求，不能操作文件</li><li>即，只有ECMAScript，几乎做不不了任何实际的项目</li></ul></li><li>Javascript<ul><li>使用ECMAScript语法规范（ES标准），外加Web API（W3C标准），缺一不可</li><li>DOM操作，BOM操作，事件绑定，Ajax等</li><li>两者结合，即可完成浏览器端的任何操作</li><li>Nodejs = ECMAScript + Web API</li></ul></li><li>Nodejs<ul><li>使用ECMAScript语法规范，外加Nodejs API，缺一不可</li><li>处理http，处理文件等，具体可参考<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a></li><li>两者结合，即可完成server端的任何操作</li><li>Nodejs = ECMAScript + Nodejs API</li></ul></li></ol></blockquote><p><strong>3）server开发和前端开发的区别？</strong></p><blockquote><ol><li>服务稳定性<ul><li>server端可能会遭受各种恶意攻击和误操作</li><li>单个客户端可以挂掉，但是服务器不能</li><li>使用PM2做进程守候</li></ul></li><li>考虑内存和CPU（优化，扩展）<ul><li>客户端独占一个浏览器，内存和CPU都不是问题</li><li>server端要承载很多请求，CPU和内存都是稀缺资源</li><li>使用stream写日志，使用redis存session</li></ul></li><li>日志记录<ul><li>前端也会参与写日志，但只是日志的发起方，不关心后续</li><li>server端要记录日志、存储日志、分析日志，前端不关心</li><li>多种日志记录方式，以及如何分析日志</li></ul></li><li>安全<ul><li>server端要随时准备接受各种恶意攻击，前端则少很多</li><li>如：越权操作，数据库攻击等</li><li>登录验证，预防XSS攻击和SQL注入</li></ul></li><li>集群和服务拆分<ul><li>产品发展速度快，流量可能会迅速增加</li><li>如何通过扩展机器和服务拆分来承载大流量？</li><li>这里虽然是单机开发，但是从设计上支持服务拆分</li></ul></li></ol></blockquote><h2 id="3-1-博客系统需求介绍"><a href="#3-1-博客系统需求介绍" class="headerlink" title="3.1 博客系统需求介绍"></a>3.1 博客系统需求介绍</h2><blockquote><ul><li>首页，作者主页，博客详情页</li><li>登录页</li><li>管理中心，新建页，编辑页</li></ul></blockquote><h2 id="3-2-1-技术方案"><a href="#3-2-1-技术方案" class="headerlink" title="3.2.1 技术方案"></a>3.2.1 技术方案</h2><blockquote><ol><li>数据如何存储（博客、用户）</li><li>如何与前端对接，即接口设计</li></ol></blockquote><p>博客表</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">title</th><th style="text-align:center">content</th><th style="text-align:center">createtime</th><th style="text-align:center">author</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">标题1</td><td style="text-align:center">内容1</td><td style="text-align:center">15436452645123</td><td style="text-align:center">zhangsan</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">标题2</td><td style="text-align:center">内容2</td><td style="text-align:center">15427676473647</td><td style="text-align:center">lisi</td></tr></tbody></table><p>用户表</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">username</th><th style="text-align:center">passworrd</th><th style="text-align:center">realname</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">zhangsan</td><td style="text-align:center">123</td><td style="text-align:center">张三</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">lisi</td><td style="text-align:center">123</td><td style="text-align:center">李四</td></tr></tbody></table><p>接口设计</p><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">接口</th><th style="text-align:center">方法</th><th style="text-align:center">url参数</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">获取博客列表</td><td style="text-align:center">/api/blog/list</td><td style="text-align:center">get</td><td style="text-align:center">author作者，keyword搜索关键字</td><td style="text-align:center">参数为空的话，则不进行查询过滤</td></tr><tr><td style="text-align:center">获取一篇博客的内容</td><td style="text-align:center">/api/blog/detail</td><td style="text-align:center">get</td><td style="text-align:center">id</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">新增一篇博客</td><td style="text-align:center">/api/blog/new</td><td style="text-align:center">post</td><td style="text-align:center"></td><td style="text-align:center">post中有新增的信息</td></tr><tr><td style="text-align:center">更新一篇博客</td><td style="text-align:center">/api/blog/update</td><td style="text-align:center">post</td><td style="text-align:center">id</td><td style="text-align:center">postData中有更新的内容</td></tr><tr><td style="text-align:center">删除一篇博客</td><td style="text-align:center">/api/blog/del</td><td style="text-align:center">post</td><td style="text-align:center">id</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">登录</td><td style="text-align:center">/api/user/login</td><td style="text-align:center">post</td><td style="text-align:center"></td><td style="text-align:center">postData中有用户名和密码</td></tr></tbody></table><h2 id="3-2-2-关于登录"><a href="#3-2-2-关于登录" class="headerlink" title="3.2.2 关于登录"></a>3.2.2 关于登录</h2><ul><li>业界有统一的解决方案，一般不用再重新设计</li><li>实现起来比较复杂，课程后面会讲解</li></ul><h2 id="4-1-1-开发接口（不用任何框架）"><a href="#4-1-1-开发接口（不用任何框架）" class="headerlink" title="4.1.1 开发接口（不用任何框架）"></a>4.1.1 开发接口（不用任何框架）</h2><ul><li>nodejs处理http请求</li><li>搭建开发环境</li><li>开发接口（暂不连接数据库，暂不考虑登录）</li></ul><h2 id="4-1-2-http请求概述"><a href="#4-1-2-http请求概述" class="headerlink" title="4.1.2 http请求概述"></a>4.1.2 http请求概述</h2><ul><li>DNS解析，建立TCP连接（3次握手），发送http请求</li><li>server接收到http请求，处理，并返回</li><li>客户端收到返回的数据，处理数据（如渲染页面，执行js）</li></ul><h2 id="4-2-1-nodejs处理http请求"><a href="#4-2-1-nodejs处理http请求" class="headerlink" title="4.2.1 nodejs处理http请求"></a>4.2.1 nodejs处理http请求</h2><ul><li>get请求和querystring</li><li>post请求和postdata</li><li>路由</li></ul><h2 id="4-2-2简单示例"><a href="#4-2-2简单示例" class="headerlink" title="4.2.2简单示例"></a>4.2.2简单示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后浏览器访问 http://localhost:8000/</span></span><br></pre></td></tr></table></figure><h2 id="4-2-3-nodejs处理get请求"><a href="#4-2-3-nodejs处理get请求" class="headerlink" title="4.2.3 nodejs处理get请求"></a>4.2.3 nodejs处理get请求</h2><ul><li>get请求，即客户端要向server端获取数据，如查询博客列表</li><li>通过querystring来传递数据，如a.html?a=100&amp;b=200</li><li>浏览器直接访问，就发送get请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createSeerver(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'method:'</span>, req.method); <span class="comment">// GET</span></span><br><span class="line">  <span class="keyword">const</span> url = req.url; <span class="comment">// url</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'url:'</span>, url);</span><br><span class="line">  req.query =  querystring.parse(url.split(<span class="string">'?'</span>)[<span class="number">1</span>]); <span class="comment">// 解析 querystring</span></span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(req.query)); <span class="comment">// 将querystring 返回</span></span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><h2 id="4-3-1-nodejs处理post请求"><a href="#4-3-1-nodejs处理post请求" class="headerlink" title="4.3.1 nodejs处理post请求"></a>4.3.1 nodejs处理post请求</h2><ul><li>post请求，即客户端要向服务端传递数据，如新建博客</li><li>通过post data传递数据，后面会演示</li><li>浏览器无法直接模拟，需要手写js，或者使用postman</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server =  http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    <span class="comment">// req 数据格式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'req content-type:'</span>, req.headers[<span class="string">'content-type'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    <span class="keyword">let</span> postData = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">      postData += chunk.toString();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'postData:'</span>, postData);</span><br><span class="line">      res.end(postData);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">4003</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running on port 4003.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-4-处理http请求的综合示例"><a href="#4-4-处理http请求的综合示例" class="headerlink" title="4.4 处理http请求的综合示例"></a>4.4 处理http请求的综合示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  <span class="keyword">const</span> path = url.split(<span class="string">'?'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> query =  querystring.parse(url.split[<span class="string">'?'</span>][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">'content-type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回</span></span><br><span class="line">  <span class="keyword">const</span> resData = &#123;</span><br><span class="line">    method,</span><br><span class="line">    utl,</span><br><span class="line">    path,</span><br><span class="line">    query</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> postData = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">      postData += chunk.toString();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      resData.postData = postData;</span><br><span class="line">      <span class="comment">// 返回</span></span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">4003</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running on port 4003.'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-5-搭建开发环境"><a href="#4-5-搭建开发环境" class="headerlink" title="4.5 搭建开发环境"></a>4.5 搭建开发环境</h2><ul><li>从0开始搭建，不使用任何框架</li><li>使用nodemon监测文件变化，自动重启node</li><li>使用cross-env设置环境变量，兼容mac linux和windows</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为什么将www.js和app.js拆分开？目的是为了抽离，app.js主要是为了业务提供服务的一些业务代码，www.js是和server的技术有关系</span></span><br><span class="line"><span class="comment">// www.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">4003</span>;</span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="built_in">require</span>(<span class="string">'../app'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server= http.createServer(seerverHandle);</span><br><span class="line">server.listen(PORT, ()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running on port 4003.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">'content-type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resData = &#123;</span><br><span class="line">    name: <span class="string">'木木'</span>，</span><br><span class="line">    site: <span class="string">'mumu'</span>,</span><br><span class="line">    env: process.env.NODE_ENV</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="string">"script"</span>: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=dev node ./bin/www.js"</span>,</span><br><span class="line">    <span class="string">"prod"</span>: <span class="string">"cross-env NODE_DEV=production node ./bin/www.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-开发接口"><a href="#4-6-开发接口" class="headerlink" title="4.6 开发接口"></a>4.6 开发接口</h2><ul><li>初始化路由：根据之前技术方案的设计，做出路由</li><li>返回假数据：将路由和数据处理分离，以符合设计原则</li></ul><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">接口</th><th style="text-align:center">方法</th><th style="text-align:center">url参数</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">获取博客列表</td><td style="text-align:center">/api/blog/list</td><td style="text-align:center">get</td><td style="text-align:center">author作者，keyword搜索关键字</td><td style="text-align:center">参数为空的话，则不进行查询过滤</td></tr><tr><td style="text-align:center">获取一篇博客的内容</td><td style="text-align:center">/api/blog/detail</td><td style="text-align:center">get</td><td style="text-align:center">id</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">新增一篇博客</td><td style="text-align:center">/api/blog/new</td><td style="text-align:center">post</td><td style="text-align:center"></td><td style="text-align:center">post中有新增的信息</td></tr><tr><td style="text-align:center">更新一篇博客</td><td style="text-align:center">/api/blog/update</td><td style="text-align:center">post</td><td style="text-align:center">id</td><td style="text-align:center">postData中有更新的内容</td></tr><tr><td style="text-align:center">删除一篇博客</td><td style="text-align:center">/api/blog/del</td><td style="text-align:center">post</td><td style="text-align:center">id</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">登录</td><td style="text-align:center">/api/user/login</td><td style="text-align:center">post</td><td style="text-align:center"></td><td style="text-align:center">postData中有用户名和密码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="built_in">require</span>(<span class="string">'./src/router/blog'</span>);</span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="built_in">require</span>(<span class="string">'./src/router/user'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">'Content-type'</span>, <span class="string">'applicatiion/json'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取path</span></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  <span class="keyword">const</span> path = url.split(<span class="string">'?'</span>)[<span class="number">0</span>];</span><br><span class="line">  req.path = path;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 blog 路由</span></span><br><span class="line">  <span class="keyword">const</span> blogData = handleBlogRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span>(blogData) &#123;</span><br><span class="line">    res.end(</span><br><span class="line">      <span class="built_in">JSON</span>.stringify(blogData)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 user 路由</span></span><br><span class="line">  <span class="keyword">const</span> userData = handleUserRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span>(userData) &#123;</span><br><span class="line">    res.end(</span><br><span class="line">      <span class="built_in">JSON</span>.stringify(userData)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未命中路由，返回404</span></span><br><span class="line">  res.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">  res.write(<span class="string">'404 Not Found\n'</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/router/blog.js</span></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> path = req.path;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取博客列表</span></span><br><span class="line">  <span class="keyword">if</span>(method === <span class="string">'GET'</span>&amp;&amp;path===<span class="string">'/api/blog/list'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是一个获取博客列表的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleBlogRouter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/router/user.js</span></span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> path = req.path;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户登录</span></span><br><span class="line">  <span class="keyword">if</span>(method === <span class="string">'GET'</span>&amp;&amp;path===<span class="string">'/api/user/login'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是一个用户登录的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleUserRouter;</span><br></pre></td></tr></table></figure><h2 id="4-8-promise回忆"><a href="#4-8-promise回忆" class="headerlink" title="4.8 promise回忆"></a>4.8 promise回忆</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// callback 获取一个文件的内容</span></span><br><span class="line"><span class="comment">// const readFileContent = (filename, callBack) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   const fullFileName = path.resolve(__dirname, 'files', filename);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   fs.readFile(fullFileName, (err, data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     if (err) &#123;</span></span><br><span class="line"><span class="comment">//       console.log(err);</span></span><br><span class="line"><span class="comment">//       return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     callBack(</span></span><br><span class="line"><span class="comment">//       JSON.parse(data.toString())</span></span><br><span class="line"><span class="comment">//     );</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  测试 callback-hell</span></span><br><span class="line"><span class="comment">// readFileContent('a.json', aData =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log('a data:', aData);</span></span><br><span class="line"><span class="comment">//   readFileContent('b.json', bData =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log('b data:', bData);</span></span><br><span class="line"><span class="comment">//     readFileContent('c.json', cData =&gt; &#123;</span></span><br><span class="line"><span class="comment">//       console.log('c data:', cData);</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 获取文件内容</span></span><br><span class="line"><span class="keyword">const</span> readFileContent = <span class="function">(<span class="params">filename</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fullFileName = path.resolve(__dirname, <span class="string">'files'</span>, filename);</span><br><span class="line">    fs.readFile(fullFileName, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      resolve(</span><br><span class="line">        <span class="built_in">JSON</span>.parse(data.toString())</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">readFileContent(<span class="string">'a.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">aData</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a data:'</span>, aData);</span><br><span class="line">    <span class="keyword">return</span> readFileContent(aData.next);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">bData</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b data:'</span>, bData);</span><br><span class="line">    <span class="keyword">return</span> readFileContent(bData.next);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">cData</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c data:'</span>, cData);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="4-9-开发路由（处理POSTData）"><a href="#4-9-开发路由（处理POSTData）" class="headerlink" title="4.9 开发路由（处理POSTData）"></a>4.9 开发路由（处理POSTData）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="built_in">require</span>(<span class="string">'./src/router/blog'</span>);</span><br><span class="line"><span class="keyword">const</span> handleUserRouter = reuqire(<span class="string">'./srcc/router/user'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getPostData = <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(req.method!==<span class="string">'POST'</span>)&#123;</span><br><span class="line">    resolve(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(req.headers[<span class="string">'content-type'</span>]!==<span class="string">'application/json'</span>)&#123;</span><br><span class="line">    resolve(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> postData = <span class="string">''</span>;</span><br><span class="line">  req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">    postData += chunk.toString();</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(!postData) &#123;</span><br><span class="line">      resolve(&#123;&#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(</span><br><span class="line">      <span class="built_in">JSON</span>.parse(postData);</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(&#123;<span class="string">'Content-type'</span>, <span class="string">'application/json'</span>&#125;);</span><br><span class="line">  <span class="comment">// 处理 path</span></span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  req.path = url.split(<span class="string">'?'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 query</span></span><br><span class="line">  req.query =  querystring.parse(url.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 postData</span></span><br><span class="line">  getPostData().then(<span class="function"><span class="params">postData</span> =&gt;</span> &#123;</span><br><span class="line">    req.body = postData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 blog 路由</span></span><br><span class="line">    <span class="keyword">const</span> blogData = handleBlogRouter(req, res);</span><br><span class="line">    <span class="keyword">if</span>(blogData) &#123;</span><br><span class="line">      res.end(</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(blogData)</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 user 路由</span></span><br><span class="line">    <span class="keyword">const</span> userData = handleUserRouter(req, res);</span><br><span class="line">    <span class="keyword">if</span>(userData) &#123;</span><br><span class="line">      res.end(</span><br><span class="line">        <span class="built_in">JSON</span>.stringify(userData);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未命中路由</span></span><br><span class="line">    res.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">    res.write(<span class="string">'404 Not Found\n'</span>);</span><br><span class="line">    res.end;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports serverHandle;</span><br></pre></td></tr></table></figure><h2 id="4-11总结"><a href="#4-11总结" class="headerlink" title="4.11总结"></a>4.11总结</h2><ul><li>nodejs处理http请求的常用技能，使用postman</li><li>nodejs开发博客项目的接口（未连接数据库，未使用登录）</li><li>为何要将router和controller分开？</li></ul><p>完整示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./src/router/blog.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; SuccessModel, ErrorModel &#125; = <span class="built_in">require</span>(<span class="string">'../model/resModel'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; getList, getDetail, newBlog, updateBlog, deleteBlog &#125; = <span class="built_in">require</span>(<span class="string">'../controller/blog'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method; <span class="comment">// GET POST</span></span><br><span class="line">  <span class="keyword">const</span> path = req.path;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> id = req.query.id;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取博客列表</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span> &amp;&amp; path === <span class="string">'/api/blog/list'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> author = req.query.author || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">const</span> keyword = req.query.keyword || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">const</span> listData = getList(author, keyword);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(listData);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取博客详情</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span> &amp;&amp; path === <span class="string">'/api/blog/detail'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = getDetail(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新建一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; path === <span class="string">'/api/blog/new'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> blogData = req.body;</span><br><span class="line">    <span class="keyword">const</span> data = newBlog(blogData);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel(data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; path === <span class="string">'/api/blog/update'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = updateBlog(id, req.body);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">'更新博客失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除一篇博客</span></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'POST'</span> &amp;&amp; path === <span class="string">'/api/blog/delete'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = deleteBlog(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SuccessModel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ErrorModel(<span class="string">'删除博客失败'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleBlogRouter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/controller/blog.js</span></span><br><span class="line"><span class="keyword">const</span> getList = <span class="function">(<span class="params">author, keyword</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 先返回假数据（格式是正确的）</span></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'标题A'</span>,</span><br><span class="line">      content: <span class="string">'内容A'</span>,</span><br><span class="line">      createTime: <span class="number">1558664497766</span>,</span><br><span class="line">      author: <span class="string">'zhangsan'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">2</span>,</span><br><span class="line">      title: <span class="string">'标题B'</span>,</span><br><span class="line">      content: <span class="string">'内容B'</span>,</span><br><span class="line">      createTime: <span class="number">1558664555616</span>,</span><br><span class="line">      author: <span class="string">'lisi'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDetail = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 先返回假数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    title: <span class="string">'标题A'</span>,</span><br><span class="line">    content: <span class="string">'内容A'</span>,</span><br><span class="line">    createTime: <span class="number">1558664497766</span>,</span><br><span class="line">    author: <span class="string">'zhangsan'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newBlog = <span class="function">(<span class="params">blogData = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// blogData 是一个博客对象，包含 title content 属性</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'newBlog blogData...'</span>, blogData);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    id: <span class="number">3</span> <span class="comment">// 表示新建博客，插入到数据库表里面的 id</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateBlog = <span class="function">(<span class="params">id, blogData = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// blogData 是一个博客对象，包含title content 属性</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'update blog...'</span>, id, blogData);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deleteBlog = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// id 是删除博客的id</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'deleteBlog id:'</span>, id);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getList,</span><br><span class="line">  getDetail,</span><br><span class="line">  newBlog,</span><br><span class="line">  updateBlog,</span><br><span class="line">  deleteBlog</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="4-12-路由和API"><a href="#4-12-路由和API" class="headerlink" title="4.12 路由和API"></a>4.12 路由和API</h2><ul><li>API:<br>前端和后端、不同端（子系统）之间对接的一个术语<br>url（路由）<code>/api/blog/list</code> get，输入，输出</li><li>路由：<br>API的一部分<br>后端系统内部的一个模块</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-1-Node-js-的真正用途&quot;&gt;&lt;a href=&quot;#1-1-Node-js-的真正用途&quot; class=&quot;headerlink&quot; title=&quot;1.1 Node.js 的真正用途&quot;&gt;&lt;/a&gt;1.1 Node.js 的真正用途&lt;/h2&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Redux入门</title>
    <link href="http://yoursite.com/2018/05/29/hello-redux/"/>
    <id>http://yoursite.com/2018/05/29/hello-redux/</id>
    <published>2018-05-29T08:39:54.000Z</published>
    <updated>2019-04-30T03:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redux介绍"><a href="#Redux介绍" class="headerlink" title="Redux介绍"></a><strong>Redux介绍</strong></h3><p>Redux是一个数据状态管理插件，搭配React特别适合，详细的用法可见<a href="https://cn.redux.js.org/" target="_blank" rel="noopener">Redux官网</a>。</p><h3 id="Redux使用场景"><a href="#Redux使用场景" class="headerlink" title="Redux使用场景"></a><strong>Redux使用场景</strong></h3><p>无论是移动端还是pc端，当你使用React或者Vue开发组件化的SPA程序时，组件之间共享信息是一个非常大的问题。例如，用户登录之后客户端会存储y用户信息（如<code>userId</code>，头像等），而系统的很多个组件都会用到这些信息，例如收藏，评论，点赞等。这些组件在用到用户信息时，难道每次都要重新获取一遍？————自然不是这样的。因此每个系统都需要一个管理多组件使用的公共信息的功能，这就是Redux的作用。同理，Vue也有相应的工具Vuex。<br><em>只要使用React开发系统，绝大部分情况下都需要结合Redux来使用。用着用着，你就会明白其中的道理，只是我现在还不能体会它的好。</em></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>如果是单纯使用Redux仅仅安装redux即可，执行<code>npm install redux --save</code>;<br>若是在React中使用React，还需安装React-redux，执行<code>npm install react-redux --save</code>。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：定义计算规则，即reducer</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">       <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">       <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 第二步：根据计算规则生成store</span></span><br><span class="line"> <span class="keyword">let</span> store = createStore(counter);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 第三步：定义数据（即 state）变化之后的派发规则</span></span><br><span class="line"> store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'fn1 -&gt; current state'</span>, store.getState());</span><br><span class="line"> &#125;);</span><br><span class="line"> store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'fn2 -&gt; current state'</span>, store.getState());</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 第四步：触发数据变化</span></span><br><span class="line"> store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;);</span><br><span class="line"> store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;);</span><br><span class="line"> store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'DECREMENT'</span> &#125;);</span><br></pre></td></tr></table></figure><p>简单几十行代码，就诠释了Redux的设计原理，这里j简单分析一下：</p><ul><li>Redux是一个管理数据的工具，我们创建了一个<code>store</code>变量用来管理数据。而这个<code>store</code>不是凭空创建的，创建它的前提是，得设定一个管理规则。以上代码中，我们的管理规则是：数据（即<code>state</code>）默认是0，传入<code>INCREMENT</code>就加1，传入<code>DECREMENT</code>就减1。</li><li>创建store用来管理数据，具体的管理形式是什么呢？第一，要通过一个函数来触发数据的变化，即<code>dispatch</code>，触发的时候一定要符合之前定制的规则，否则无效。第二，数据一旦发生变化时，会导致怎样的后果，即<code>subscribe</code>中定义的函数会执行。第三，如何取得当前的数据，即<code>getState()</code>。这一块，熟悉设计模式的t同学不难理解，这就是普通的发布和订阅的设计模式，也是js惯用的设计模式。</li><li>还有一点要特别注意，即在规则函数中，数据变化时要return一个新的值，而不是直接修改原来的值。这一点和之前提到的Immuable.js一样，都是使用了不可变数据这一概念。这种设计方式明确了数据变化时段，使得数据管理更加清晰，复杂度更低。</li></ul><h2 id="Redux-和-React集成"><a href="#Redux-和-React集成" class="headerlink" title="Redux 和 React集成"></a><strong>Redux 和 React集成</strong></h2><h3 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a><strong>创建store</strong></h3><p>跟上次讲过的demo一样，首先需要创建一个store，参见如下代码。之前的demo代码提到，创建store之前要有规则，这里的第一个参数就是规则，第二个参数即初始化的参数，第三个参数可调起chrome扩展程序，具体可见redux-devtools。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store/configureStore.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; rootReducer &#125; <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer, initialState, </span><br><span class="line">  <span class="comment">// 触发redux-devtools</span></span><br><span class="line">  <span class="built_in">window</span>.devToolExtensions ? <span class="built_in">window</span>.devToolExtensions() : <span class="literal">undefined</span>;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="创建规则（Reducer）"><a href="#创建规则（Reducer）" class="headerlink" title="创建规则（Reducer）"></a><strong>创建规则（Reducer）</strong></h3><p>使用redux时，刚才提到的“规则”被称作<code>reducer</code>（就是一个统一的称呼，不必去纠结），这里的数据规则都在./reducers目录下。<br>先看<code>userinfo.js</code>的代码，跟上次的代码几乎一样，唯一的区别就是将const都写到./constants/userinfo.js中，之所以这样做，是因为这些const会在多个文件中使用，因此要抽出来。<br>再看index.js的代码，它用<code>combineRecuders</code>这个函数对userinfo.js的数据进行了封装，这样做是为了更好的扩展性。试想，一个系统中存储在Redux中的数据可能会很多，我们这里用一个userinfo.js处理用户数据，很可能哪天会再加nav.js处理导航数据，再加ad.js处理广告数据……<br>上次的demo中，state就是一个数据，可以state + 1 或者  state - 1，数据结构非常简单。而现在，数据结构复杂太多，必须分组管理。因此我们需要state.userinfo来表示用户数据，state.nav表示导航数据，state.ad表示广告数据……—————这就是combineReducers封装各个reducer的作用。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./reducers/userinfo.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">'../constants/userinfo'</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">userinfo</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> actionTypes.userinfo_login:</span><br><span class="line">      <span class="keyword">return</span> action.data;</span><br><span class="line">    <span class="keyword">case</span> actionTypes.update_cityname:</span><br><span class="line">      <span class="keyword">return</span> action.data;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./reducers/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> userinfo <span class="keyword">from</span> <span class="string">'./userinfo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">  userinfo</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><h3 id="创建Actions"><a href="#创建Actions" class="headerlink" title="创建Actions"></a><strong>创建Actions</strong></h3><p>上次的demo中，最后执行数据变化时<code>store.dispatch({type: ‘INCREMENT’})</code>，这里的<code>{type: ‘INCREMENT’}</code>是我们手动写上的，而在实际应用中，我们需要用一些函数将它封装起来，即<code>./actions/userinfo.js</code>中的文件，虽然此处只有一个userinfo.js文件。<br>在userinfo.js中，我们把每个业务操作部分都分装为一个函数，该函数接收<code>data</code>，然后再根据reducer的规则对data进行封装，最后返回。当然，最后返回的结果肯定还是会给<code>dispatch</code>来处理，这是后面要说的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./actions/userinfo.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">'../constants/userinfo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: actionTypes.userinfo_login,</span><br><span class="line">    data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: actionTypes.update_cityname,</span><br><span class="line">    data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结合到React"><a href="#结合到React" class="headerlink" title="结合到React"></a><strong>结合到React</strong></h3><p>先看<code>./App.js</code>，重点注意下面代码。这里创建了<code>store</code>并传递给了<code>&lt;Provider&gt;</code>组件，然后让<code>&lt;Provider&gt;</code>作为所有组件的根节点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">'./stores/configureStore'</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./containers/Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store =  configureStore();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;Hello /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后看<code>./containers/Hello/index.js</code>，请注意下面这些代码。通过下面的封装，j就把<code>userinfo</code>和<code>userinfoActions</code>当做props传入Hello中了，即在Hello组件中通过<code>this.props.userinfo</code>和<code>this.props.userinfoActions</code>即可获得数据和actions：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>; </span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> userinfoActions <span class="keyword">from</span> <span class="string">'../../actions/userinfo.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 此处省略n多行哈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    userinfo: state.userinfo</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    userinfoActions: bindActionCreators(userinfoActions, dispatch)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Hello);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Redux介绍&quot;&gt;&lt;a href=&quot;#Redux介绍&quot; class=&quot;headerlink&quot; title=&quot;Redux介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;Redux介绍&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Redux是一个数据状态管理插件，搭配React特别适合，详细的用
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React Redux" scheme="http://yoursite.com/tags/React-Redux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 快速搭建博客</title>
    <link href="http://yoursite.com/2018/03/09/hello-hexo/"/>
    <id>http://yoursite.com/2018/03/09/hello-hexo/</id>
    <published>2018-03-09T01:28:42.000Z</published>
    <updated>2019-04-30T03:14:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一个快速、高效的博客框架。Hexo使用Markdown（或者其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a><strong>快速搭建</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init myBlog</span><br><span class="line">$ <span class="built_in">cd</span> myBlog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置folder，默认在当前文件夹下建立网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p><p>新建一篇文章。如果没有设置layout的话，默认使用_config.yml中的default_layout参数代替。如果标题包含空格的话，请使用引号括起来。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></p><p>生成静态文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>启动服务器。默认情况下，访问地址为<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>部署网站。</p><h3 id="部署GitHub"><a href="#部署GitHub" class="headerlink" title="部署GitHub"></a><strong>部署GitHub</strong></h3><p>Hexo提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><h5 id="1，安装hexo-deployer-git"><a href="#1，安装hexo-deployer-git" class="headerlink" title="1，安装hexo-deployer-git"></a><strong>1，安装hexo-deployer-git</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5 id="2，修改配置（-config-yml）"><a href="#2，修改配置（-config-yml）" class="headerlink" title="2，修改配置（_config.yml）"></a><strong>2，修改配置（_config.yml）</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [repository url]</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><h5 id="3，推送部署"><a href="#3，推送部署" class="headerlink" title="3，推送部署"></a><strong>3，推送部署</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>其实，上面的第三条的<code>hexo d</code>就是部署网站命令，d就是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，例如我的<a href="https://bbgirl01.github.io/" target="_blank" rel="noopener">bbgirl01.github.io</a>，这就是我的博客，恭喜自己，我的博客终于上线啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;是一个快速、高效的博客框架。Hexo使用Markdown（或者其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
