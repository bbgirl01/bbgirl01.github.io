<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MUMU</title>
  
  <subtitle>MUMU&#39;S BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-23T07:48:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bbgirl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js开发博客项目</title>
    <link href="http://yoursite.com/2019/04/29/hello-nodejs1/"/>
    <id>http://yoursite.com/2019/04/29/hello-nodejs1/</id>
    <published>2019-04-29T07:28:42.000Z</published>
    <updated>2019-05-23T07:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-Node-js-的真正用途"><a href="#1-1-Node-js-的真正用途" class="headerlink" title="1.1 Node.js 的真正用途"></a>1.1 Node.js 的真正用途</h2><blockquote><ul><li>Nodejs，一个javascript运行环境</li><li><code>运行在服务器，作为web server</code></li><li>运行在本地，作为打包和构建工具</li></ul></blockquote><h2 id="1-2-内容概述"><a href="#1-2-内容概述" class="headerlink" title="1.2 内容概述"></a>1.2 内容概述</h2><blockquote><ul><li>做什么？——nodejs入门到实践，开发个人博客系统</li><li>哪些部分？——API，数据存储，登录，日志，安全</li><li>技术？——http stream session mysql redis nginx pm2 …</li></ul></blockquote><h2 id="1-3-案例架构"><a href="#1-3-案例架构" class="headerlink" title="1.3 案例架构"></a>1.3 案例架构</h2><p><img src="/img/anli_jiagou.jpg" alt="图片alt"></p><h2 id="2-1-Nodejs-介绍"><a href="#2-1-Nodejs-介绍" class="headerlink" title="2.1 Nodejs 介绍"></a>2.1 Nodejs 介绍</h2><p><strong>1）下载 &amp; 安装</strong></p><blockquote><ol><li>普通安装（只有一个版本，不能随意切换），访问<a href="http://nodejs.cn/" target="_blank" rel="noopener">官网</a>,下载并安装；完了打开命令行，运行<code>node -v</code>和<code>npm -v</code>测试。</li><li>使用NVM（Node Version Manager）<ul><li>Nodejs版本管理工具，可切换多个Nodejs版本</li><li>mac os，使用<code>brew install nvm</code>(<a href="https://brew.sh/" target="_blank" rel="noopener">brew</a>是苹果的软件管理工具)</li><li>windows，github中搜索nvm-windows，有下载地址</li><li><code>nvm list</code>，查看当前所有的node版本</li><li><code>nvm install v10.15.0</code>，安装指定版本</li><li><code>nvm use --delete-prefix 8.12.0</code>，切换到指定版本   </li></ul></li></ol></blockquote><p><strong>2）nodejs和前端javascript的区别？</strong></p><blockquote><ol><li>ECMAScript，具体可见<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰的ES6</a><ul><li>定义了语法，写javascript和nodejs都必须遵守</li><li>变量定义，循环、判断、函数</li><li>原型和原型链、作用域和闭包、异步</li><li>不能操作DOM，不能监听click事件，不能发送ajax请求</li><li>不能处理http请求，不能操作文件</li><li>即，只有ECMAScript，几乎做不不了任何实际的项目</li></ul></li><li>Javascript<ul><li>使用ECMAScript语法规范（ES标准），外加Web API（W3C标准），缺一不可</li><li>DOM操作，BOM操作，事件绑定，Ajax等</li><li>两者结合，即可完成浏览器端的任何操作</li><li>Nodejs = ECMAScript + Web API</li></ul></li><li>Nodejs<ul><li>使用ECMAScript语法规范，外加Nodejs API，缺一不可</li><li>处理http，处理文件等，具体可参考<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a></li><li>两者结合，即可完成server端的任何操作</li><li>Nodejs = ECMAScript + Nodejs API</li></ul></li></ol></blockquote><p><strong>3）server开发和前端开发的区别？</strong></p><blockquote><ol><li>服务稳定性<ul><li>server端可能会遭受各种恶意攻击和误操作</li><li>单个客户端可以挂掉，但是服务器不能</li><li>使用PM2做进程守候</li></ul></li><li>考虑内存和CPU（优化，扩展）<ul><li>客户端独占一个浏览器，内存和CPU都不是问题</li><li>server端要承载很多请求，CPU和内存都是稀缺资源</li><li>使用stream写日志，使用redis存session</li></ul></li><li>日志记录<ul><li>前端也会参与写日志，但只是日志的发起方，不关心后续</li><li>server端要记录日志、存储日志、分析日志，前端不关心</li><li>多种日志记录方式，以及如何分析日志</li></ul></li><li>安全<ul><li>server端要随时准备接受各种恶意攻击，前端则少很多</li><li>如：越权操作，数据库攻击等</li><li>登录验证，预防XSS攻击和SQL注入</li></ul></li><li>集群和服务拆分<ul><li>产品发展速度快，流量可能会迅速增加</li><li>如何通过扩展机器和服务拆分来承载大流量？</li><li>这里虽然是单机开发，但是从设计上支持服务拆分</li></ul></li></ol></blockquote><h2 id="3-1-博客系统需求介绍"><a href="#3-1-博客系统需求介绍" class="headerlink" title="3.1 博客系统需求介绍"></a>3.1 博客系统需求介绍</h2><blockquote><ul><li>首页，作者主页，博客详情页</li><li>登录页</li><li>管理中心，新建页，编辑页</li></ul></blockquote><h2 id="3-2-1-技术方案"><a href="#3-2-1-技术方案" class="headerlink" title="3.2.1 技术方案"></a>3.2.1 技术方案</h2><blockquote><ol><li>数据如何存储（博客、用户）</li><li>如何与前端对接，即接口设计</li></ol></blockquote><p>博客表</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">title</th><th style="text-align:center">content</th><th style="text-align:center">createtime</th><th style="text-align:center">author</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">标题1</td><td style="text-align:center">内容1</td><td style="text-align:center">15436452645123</td><td style="text-align:center">zhangsan</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">标题2</td><td style="text-align:center">内容2</td><td style="text-align:center">15427676473647</td><td style="text-align:center">lisi</td></tr></tbody></table><p>用户表</p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">username</th><th style="text-align:center">passworrd</th><th style="text-align:center">realname</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">zhangsan</td><td style="text-align:center">123</td><td style="text-align:center">张三</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">lisi</td><td style="text-align:center">123</td><td style="text-align:center">李四</td></tr></tbody></table><p>接口设计</p><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">接口</th><th style="text-align:center">方法</th><th style="text-align:center">url参数</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">获取博客列表</td><td style="text-align:center">/api/blog/list</td><td style="text-align:center">get</td><td style="text-align:center">author作者，keyword搜索关键字</td><td style="text-align:center">参数为空的话，则不进行查询过滤</td></tr><tr><td style="text-align:center">获取一篇博客的内容</td><td style="text-align:center">/api/blog/detail</td><td style="text-align:center">get</td><td style="text-align:center">id</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">新增一篇博客</td><td style="text-align:center">/api/blog/new</td><td style="text-align:center">post</td><td style="text-align:center"></td><td style="text-align:center">post中有新增的信息</td></tr><tr><td style="text-align:center">更新一篇博客</td><td style="text-align:center">/api/blog/update</td><td style="text-align:center">post</td><td style="text-align:center">id</td><td style="text-align:center">postData中有更新的内容</td></tr><tr><td style="text-align:center">删除一篇博客</td><td style="text-align:center">/api/blog/del</td><td style="text-align:center">post</td><td style="text-align:center">id</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">登录</td><td style="text-align:center">/api/user/login</td><td style="text-align:center">post</td><td style="text-align:center"></td><td style="text-align:center">postData中有用户名和密码</td></tr></tbody></table><h2 id="3-2-2-关于登录"><a href="#3-2-2-关于登录" class="headerlink" title="3.2.2 关于登录"></a>3.2.2 关于登录</h2><ul><li>业界有统一的解决方案，一般不用再重新设计</li><li>实现起来比较复杂，课程后面会讲解</li></ul><h2 id="4-1-1-开发接口（不用任何框架）"><a href="#4-1-1-开发接口（不用任何框架）" class="headerlink" title="4.1.1 开发接口（不用任何框架）"></a>4.1.1 开发接口（不用任何框架）</h2><ul><li>nodejs处理http请求</li><li>搭建开发环境</li><li>开发接口（暂不连接数据库，暂不考虑登录）</li></ul><h2 id="4-1-2-http请求概述"><a href="#4-1-2-http请求概述" class="headerlink" title="4.1.2 http请求概述"></a>4.1.2 http请求概述</h2><ul><li>DNS解析，建立TCP连接（3次握手），发送http请求</li><li>server接收到http请求，处理，并返回</li><li>客户端收到返回的数据，处理数据（如渲染页面，执行js）</li></ul><h2 id="4-2-1-nodejs处理http请求"><a href="#4-2-1-nodejs处理http请求" class="headerlink" title="4.2.1 nodejs处理http请求"></a>4.2.1 nodejs处理http请求</h2><ul><li>get请求和querystring</li><li>post请求和postdata</li><li>路由</li></ul><h2 id="4-2-2简单示例"><a href="#4-2-2简单示例" class="headerlink" title="4.2.2简单示例"></a>4.2.2简单示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后浏览器访问 http://localhost:8000/</span></span><br></pre></td></tr></table></figure><h2 id="4-2-3-nodejs处理get请求"><a href="#4-2-3-nodejs处理get请求" class="headerlink" title="4.2.3 nodejs处理get请求"></a>4.2.3 nodejs处理get请求</h2><ul><li>get请求，即客户端要向server端获取数据，如查询博客列表</li><li>通过querystring来传递数据，如a.html?a=100&amp;b=200</li><li>浏览器直接访问，就发送get请求</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createSeerver(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'method:'</span>, req.method); <span class="comment">// GET</span></span><br><span class="line">  <span class="keyword">const</span> url = req.url; <span class="comment">// url</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'url:'</span>, url);</span><br><span class="line">  req.query =  querystring.parse(url.split(<span class="string">'?'</span>)[<span class="number">1</span>]); <span class="comment">// 解析 querystring</span></span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(req.query)); <span class="comment">// 将querystring 返回</span></span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><h2 id="4-3-1-nodejs处理post请求"><a href="#4-3-1-nodejs处理post请求" class="headerlink" title="4.3.1 nodejs处理post请求"></a>4.3.1 nodejs处理post请求</h2><ul><li>post请求，即客户端要向服务端传递数据，如新建博客</li><li>通过post data传递数据，后面会演示</li><li>浏览器无法直接模拟，需要手写js，或者使用postman</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server =  http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    <span class="comment">// req 数据格式</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'req content-type:'</span>, req.headers[<span class="string">'content-type'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    <span class="keyword">let</span> postData = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">      postData += chunk.toString();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'postData:'</span>, postData);</span><br><span class="line">      res.end(postData);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">4003</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running on port 4003.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-4-处理http请求的综合示例"><a href="#4-4-处理http请求的综合示例" class="headerlink" title="4.4 处理http请求的综合示例"></a>4.4 处理http请求的综合示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  <span class="keyword">const</span> path = url.split(<span class="string">'?'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> query =  querystring.parse(url.split[<span class="string">'?'</span>][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">'content-type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回</span></span><br><span class="line">  <span class="keyword">const</span> resData = &#123;</span><br><span class="line">    method,</span><br><span class="line">    utl,</span><br><span class="line">    path,</span><br><span class="line">    query</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">    res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(method === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> postData = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">      postData += chunk.toString();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      resData.postData = postData;</span><br><span class="line">      <span class="comment">// 返回</span></span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">4003</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running on port 4003.'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="4-5-搭建开发环境"><a href="#4-5-搭建开发环境" class="headerlink" title="4.5 搭建开发环境"></a>4.5 搭建开发环境</h2><ul><li>从0开始搭建，不使用任何框架</li><li>使用nodemon监测文件变化，自动重启node</li><li>使用cross-env设置环境变量，兼容mac linux和windows</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为什么将www.js和app.js拆分开？目的是为了抽离，app.js主要是为了业务提供服务的一些业务代码，www.js是和server的技术有关系</span></span><br><span class="line"><span class="comment">// www.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">4003</span>;</span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="built_in">require</span>(<span class="string">'../app'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server= http.createServer(seerverHandle);</span><br><span class="line">server.listen(PORT, ()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running on port 4003.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">'content-type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resData = &#123;</span><br><span class="line">    name: <span class="string">'木木'</span>，</span><br><span class="line">    site: <span class="string">'mumu'</span>,</span><br><span class="line">    env: process.env.NODE_ENV</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="string">"script"</span>: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=dev node ./bin/www.js"</span>,</span><br><span class="line">    <span class="string">"prod"</span>: <span class="string">"cross-env NODE_DEV=production node ./bin/www.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6-开发接口"><a href="#4-6-开发接口" class="headerlink" title="4.6 开发接口"></a>4.6 开发接口</h2><ul><li>初始化路由：根据之前技术方案的设计，做出路由</li><li>返回假数据：将路由和数据处理分离，以符合设计原则</li></ul><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">接口</th><th style="text-align:center">方法</th><th style="text-align:center">url参数</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">获取博客列表</td><td style="text-align:center">/api/blog/list</td><td style="text-align:center">get</td><td style="text-align:center">author作者，keyword搜索关键字</td><td style="text-align:center">参数为空的话，则不进行查询过滤</td></tr><tr><td style="text-align:center">获取一篇博客的内容</td><td style="text-align:center">/api/blog/detail</td><td style="text-align:center">get</td><td style="text-align:center">id</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">新增一篇博客</td><td style="text-align:center">/api/blog/new</td><td style="text-align:center">post</td><td style="text-align:center"></td><td style="text-align:center">post中有新增的信息</td></tr><tr><td style="text-align:center">更新一篇博客</td><td style="text-align:center">/api/blog/update</td><td style="text-align:center">post</td><td style="text-align:center">id</td><td style="text-align:center">postData中有更新的内容</td></tr><tr><td style="text-align:center">删除一篇博客</td><td style="text-align:center">/api/blog/del</td><td style="text-align:center">post</td><td style="text-align:center">id</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">登录</td><td style="text-align:center">/api/user/login</td><td style="text-align:center">post</td><td style="text-align:center"></td><td style="text-align:center">postData中有用户名和密码</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="built_in">require</span>(<span class="string">'./src/router/blog'</span>);</span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="built_in">require</span>(<span class="string">'./src/router/user'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHandle = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置返回格式 JSON</span></span><br><span class="line">  res.setHeader(<span class="string">'Content-type'</span>, <span class="string">'applicatiion/json'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取path</span></span><br><span class="line">  <span class="keyword">const</span> url = req.url;</span><br><span class="line">  <span class="keyword">const</span> path = url.split(<span class="string">'?'</span>)[<span class="number">0</span>];</span><br><span class="line">  req.path = path;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 blog 路由</span></span><br><span class="line">  <span class="keyword">const</span> blogData = handleBlogRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span>(blogData) &#123;</span><br><span class="line">    res.end(</span><br><span class="line">      <span class="built_in">JSON</span>.stringify(blogData)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 user 路由</span></span><br><span class="line">  <span class="keyword">const</span> userData = handleUserRouter(req, res);</span><br><span class="line">  <span class="keyword">if</span>(userData) &#123;</span><br><span class="line">    res.end(</span><br><span class="line">      <span class="built_in">JSON</span>.stringify(userData)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未命中路由，返回404</span></span><br><span class="line">  res.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">  res.write(<span class="string">'404 Not Found\n'</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = serverHandle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/router/blog.js</span></span><br><span class="line"><span class="keyword">const</span> handleBlogRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> path = req.path;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取博客列表</span></span><br><span class="line">  <span class="keyword">if</span>(method === <span class="string">'GET'</span>&amp;&amp;path===<span class="string">'/api/blog/list'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是一个获取博客列表的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleBlogRouter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ./src/router/user.js</span></span><br><span class="line"><span class="keyword">const</span> handleUserRouter = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = req.method;</span><br><span class="line">  <span class="keyword">const</span> path = req.path;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户登录</span></span><br><span class="line">  <span class="keyword">if</span>(method === <span class="string">'GET'</span>&amp;&amp;path===<span class="string">'/api/user/login'</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'这是一个用户登录的接口'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = handleUserRouter;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-1-Node-js-的真正用途&quot;&gt;&lt;a href=&quot;#1-1-Node-js-的真正用途&quot; class=&quot;headerlink&quot; title=&quot;1.1 Node.js 的真正用途&quot;&gt;&lt;/a&gt;1.1 Node.js 的真正用途&lt;/h2&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Redux入门</title>
    <link href="http://yoursite.com/2018/05/29/hello-redux/"/>
    <id>http://yoursite.com/2018/05/29/hello-redux/</id>
    <published>2018-05-29T08:39:54.000Z</published>
    <updated>2019-04-30T03:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redux介绍"><a href="#Redux介绍" class="headerlink" title="Redux介绍"></a><strong>Redux介绍</strong></h3><p>Redux是一个数据状态管理插件，搭配React特别适合，详细的用法可见<a href="https://cn.redux.js.org/" target="_blank" rel="noopener">Redux官网</a>。</p><h3 id="Redux使用场景"><a href="#Redux使用场景" class="headerlink" title="Redux使用场景"></a><strong>Redux使用场景</strong></h3><p>无论是移动端还是pc端，当你使用React或者Vue开发组件化的SPA程序时，组件之间共享信息是一个非常大的问题。例如，用户登录之后客户端会存储y用户信息（如<code>userId</code>，头像等），而系统的很多个组件都会用到这些信息，例如收藏，评论，点赞等。这些组件在用到用户信息时，难道每次都要重新获取一遍？————自然不是这样的。因此每个系统都需要一个管理多组件使用的公共信息的功能，这就是Redux的作用。同理，Vue也有相应的工具Vuex。<br><em>只要使用React开发系统，绝大部分情况下都需要结合Redux来使用。用着用着，你就会明白其中的道理，只是我现在还不能体会它的好。</em></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>如果是单纯使用Redux仅仅安装redux即可，执行<code>npm install redux --save</code>;<br>若是在React中使用React，还需安装React-redux，执行<code>npm install react-redux --save</code>。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步：定义计算规则，即reducer</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">       <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'DECREMENT'</span>:</span><br><span class="line">       <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">       <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 第二步：根据计算规则生成store</span></span><br><span class="line"> <span class="keyword">let</span> store = createStore(counter);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 第三步：定义数据（即 state）变化之后的派发规则</span></span><br><span class="line"> store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'fn1 -&gt; current state'</span>, store.getState());</span><br><span class="line"> &#125;);</span><br><span class="line"> store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'fn2 -&gt; current state'</span>, store.getState());</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 第四步：触发数据变化</span></span><br><span class="line"> store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;);</span><br><span class="line"> store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'INCREMENT'</span> &#125;);</span><br><span class="line"> store.dispatch(&#123; <span class="attr">type</span>: <span class="string">'DECREMENT'</span> &#125;);</span><br></pre></td></tr></table></figure><p>简单几十行代码，就诠释了Redux的设计原理，这里j简单分析一下：</p><ul><li>Redux是一个管理数据的工具，我们创建了一个<code>store</code>变量用来管理数据。而这个<code>store</code>不是凭空创建的，创建它的前提是，得设定一个管理规则。以上代码中，我们的管理规则是：数据（即<code>state</code>）默认是0，传入<code>INCREMENT</code>就加1，传入<code>DECREMENT</code>就减1。</li><li>创建store用来管理数据，具体的管理形式是什么呢？第一，要通过一个函数来触发数据的变化，即<code>dispatch</code>，触发的时候一定要符合之前定制的规则，否则无效。第二，数据一旦发生变化时，会导致怎样的后果，即<code>subscribe</code>中定义的函数会执行。第三，如何取得当前的数据，即<code>getState()</code>。这一块，熟悉设计模式的t同学不难理解，这就是普通的发布和订阅的设计模式，也是js惯用的设计模式。</li><li>还有一点要特别注意，即在规则函数中，数据变化时要return一个新的值，而不是直接修改原来的值。这一点和之前提到的Immuable.js一样，都是使用了不可变数据这一概念。这种设计方式明确了数据变化时段，使得数据管理更加清晰，复杂度更低。</li></ul><h2 id="Redux-和-React集成"><a href="#Redux-和-React集成" class="headerlink" title="Redux 和 React集成"></a><strong>Redux 和 React集成</strong></h2><h3 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a><strong>创建store</strong></h3><p>跟上次讲过的demo一样，首先需要创建一个store，参见如下代码。之前的demo代码提到，创建store之前要有规则，这里的第一个参数就是规则，第二个参数即初始化的参数，第三个参数可调起chrome扩展程序，具体可见redux-devtools。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store/configureStore.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; rootReducer &#125; <span class="keyword">from</span> <span class="string">'./reducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer, initialState, </span><br><span class="line">  <span class="comment">// 触发redux-devtools</span></span><br><span class="line">  <span class="built_in">window</span>.devToolExtensions ? <span class="built_in">window</span>.devToolExtensions() : <span class="literal">undefined</span>;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="创建规则（Reducer）"><a href="#创建规则（Reducer）" class="headerlink" title="创建规则（Reducer）"></a><strong>创建规则（Reducer）</strong></h3><p>使用redux时，刚才提到的“规则”被称作<code>reducer</code>（就是一个统一的称呼，不必去纠结），这里的数据规则都在./reducers目录下。<br>先看<code>userinfo.js</code>的代码，跟上次的代码几乎一样，唯一的区别就是将const都写到./constants/userinfo.js中，之所以这样做，是因为这些const会在多个文件中使用，因此要抽出来。<br>再看index.js的代码，它用<code>combineRecuders</code>这个函数对userinfo.js的数据进行了封装，这样做是为了更好的扩展性。试想，一个系统中存储在Redux中的数据可能会很多，我们这里用一个userinfo.js处理用户数据，很可能哪天会再加nav.js处理导航数据，再加ad.js处理广告数据……<br>上次的demo中，state就是一个数据，可以state + 1 或者  state - 1，数据结构非常简单。而现在，数据结构复杂太多，必须分组管理。因此我们需要state.userinfo来表示用户数据，state.nav表示导航数据，state.ad表示广告数据……—————这就是combineReducers封装各个reducer的作用。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./reducers/userinfo.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">'../constants/userinfo'</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">userinfo</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> actionTypes.userinfo_login:</span><br><span class="line">      <span class="keyword">return</span> action.data;</span><br><span class="line">    <span class="keyword">case</span> actionTypes.update_cityname:</span><br><span class="line">      <span class="keyword">return</span> action.data;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./reducers/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> userinfo <span class="keyword">from</span> <span class="string">'./userinfo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">  userinfo</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><h3 id="创建Actions"><a href="#创建Actions" class="headerlink" title="创建Actions"></a><strong>创建Actions</strong></h3><p>上次的demo中，最后执行数据变化时<code>store.dispatch({type: ‘INCREMENT’})</code>，这里的<code>{type: ‘INCREMENT’}</code>是我们手动写上的，而在实际应用中，我们需要用一些函数将它封装起来，即<code>./actions/userinfo.js</code>中的文件，虽然此处只有一个userinfo.js文件。<br>在userinfo.js中，我们把每个业务操作部分都分装为一个函数，该函数接收<code>data</code>，然后再根据reducer的规则对data进行封装，最后返回。当然，最后返回的结果肯定还是会给<code>dispatch</code>来处理，这是后面要说的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./actions/userinfo.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">'../constants/userinfo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: actionTypes.userinfo_login,</span><br><span class="line">    data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: actionTypes.update_cityname,</span><br><span class="line">    data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结合到React"><a href="#结合到React" class="headerlink" title="结合到React"></a><strong>结合到React</strong></h3><p>先看<code>./App.js</code>，重点注意下面代码。这里创建了<code>store</code>并传递给了<code>&lt;Provider&gt;</code>组件，然后让<code>&lt;Provider&gt;</code>作为所有组件的根节点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">'./stores/configureStore'</span>;</span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./containers/Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store =  configureStore();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;Hello /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>然后看<code>./containers/Hello/index.js</code>，请注意下面这些代码。通过下面的封装，j就把<code>userinfo</code>和<code>userinfoActions</code>当做props传入Hello中了，即在Hello组件中通过<code>this.props.userinfo</code>和<code>this.props.userinfoActions</code>即可获得数据和actions：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>; </span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> userinfoActions <span class="keyword">from</span> <span class="string">'../../actions/userinfo.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 此处省略n多行哈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    userinfo: state.userinfo</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span> (<span class="params">dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    userinfoActions: bindActionCreators(userinfoActions, dispatch)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(Hello);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Redux介绍&quot;&gt;&lt;a href=&quot;#Redux介绍&quot; class=&quot;headerlink&quot; title=&quot;Redux介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;Redux介绍&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Redux是一个数据状态管理插件，搭配React特别适合，详细的用
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React Redux" scheme="http://yoursite.com/tags/React-Redux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 快速搭建博客</title>
    <link href="http://yoursite.com/2018/03/09/hello-hexo/"/>
    <id>http://yoursite.com/2018/03/09/hello-hexo/</id>
    <published>2018-03-09T01:28:42.000Z</published>
    <updated>2019-04-30T03:14:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一个快速、高效的博客框架。Hexo使用Markdown（或者其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a><strong>快速搭建</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init myBlog</span><br><span class="line">$ <span class="built_in">cd</span> myBlog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置folder，默认在当前文件夹下建立网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p><p>新建一篇文章。如果没有设置layout的话，默认使用_config.yml中的default_layout参数代替。如果标题包含空格的话，请使用引号括起来。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></p><p>生成静态文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>启动服务器。默认情况下，访问地址为<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>部署网站。</p><h3 id="部署GitHub"><a href="#部署GitHub" class="headerlink" title="部署GitHub"></a><strong>部署GitHub</strong></h3><p>Hexo提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><h5 id="1，安装hexo-deployer-git"><a href="#1，安装hexo-deployer-git" class="headerlink" title="1，安装hexo-deployer-git"></a><strong>1，安装hexo-deployer-git</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h5 id="2，修改配置（-config-yml）"><a href="#2，修改配置（-config-yml）" class="headerlink" title="2，修改配置（_config.yml）"></a><strong>2，修改配置（_config.yml）</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [repository url]</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><h5 id="3，推送部署"><a href="#3，推送部署" class="headerlink" title="3，推送部署"></a><strong>3，推送部署</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>其实，上面的第三条的<code>hexo d</code>就是部署网站命令，d就是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，例如我的<a href="https://bbgirl01.github.io/" target="_blank" rel="noopener">bbgirl01.github.io</a>，这就是我的博客，恭喜自己，我的博客终于上线啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;是一个快速、高效的博客框架。Hexo使用Markdown（或者其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
